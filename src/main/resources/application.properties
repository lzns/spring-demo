#server prot
server.port=8081
#server.servlet.context-path=
#server.servlet.path=/demo
#mybatis 
mybatis.mapper-locations = classpath:mapper/*Mapper.xml
#mybatis.config-location = classpath:config/sqlMapConfig.xml
mybatis.type-aliases-package =com.example.demo.entity

#dataResource
spring.datasource.driver-class-name= com.mysql.jdbc.Driver
spring.datasource.url = jdbc:mysql://172.16.0.194:3306/mi_qc?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true
spring.datasource.username = root
spring.datasource.password = 123456
spring.datasource.type= com.alibaba.druid.pool.DruidDataSource
# 下面为连接池的补充设置，应用到上面所有数据源中
#初始化建立物理连接个数
spring.datasource.initialSize=5
#最小连接池个数
spring.datasource.minIdle=5
#最大连接池个数
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间 单位毫秒
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
#用来检测连接是否有效的sql,要求是一个查询语句
spring.datasource.validationQuery=SELECT 1 FROM DUAL
#申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.testWhileIdle=true
#申请连接时检测连接是否正常，做了这个配置性能会降低
spring.datasource.testOnBorrow=false
#归还连接时检测连接是否正常，做了这个配置性能会降低
spring.datasource.testOnReturn=false
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat,wall,log4j
spring.datasource.logSlowSql=true
#jsp
spring.mvc.view.prefix=/WEB-INF/
spring.mvc.view.suffix=.jsp

#配置打印SQL日志
logging.level.com.example.demo.mapper=debug

#配置文件上传大小
spring.servlet.multipart.max-file-size=50MB

#promethues 监控
#management.endpoint.metrics.enabled=true
#management.endpoints.web.exposure.include=*
#management.endpoint.prometheus.enabled=true
#management.metrics.export.prometheus.enabled=true
#management.metrics.export.jmx.enabled=true

#clean install -U